'''С клавиатуры вводится строка, включающая строчные и прописные буквы. Требуется вывести ту же строку в
изменённом регистре, тип регистра зависит от того, каких букв больше.
 При равном количестве букв в заглавном и проптсном регистре - выводится оригинальная строка.
Например, вводится строка "HeLLo World", она должна быть преобразована в "hello world", потому что в
исходной строке малых букв больше.
В программе можно использовать строковые методы: upper() (преобразование к верхнему регистру) и lower()
 (преобразование к нижнему регистру), isupper() и islower() (проверяющие регистр строки или символа).'''
s=input('введите что-то')
low=0
sup=0
for x in s:

    if x.isupper()==True:
        sup+=1
    else:
        low+=1
if low>sup:
    l=s.lower()
elif low<sup:
    l=s.upper()
else:
    print(s)
print(l)
'''Дано слово "объектно-ориентированный". Используя индексацию и срезы составьте из него как можно 
больше слов "объект",
 "ориентир", "тир", "кот", "рента" и тд. Выведите их на экран.'''
s = "объектно-ориентированный"
print(s[0:6])
print(s[9:17])
print(s[14:17])
print(s[4:15:5])
print(s[10] + s[12:15] + s[19])
print(s[6] + s[3:5] + s[5] + s[19] + s[10])
print(s[5] + s[10] + s[7] + s[23] +s[4] + s[19])
'''Строковый метод isdigit() проверяет, состоит ли строка только из цифр.
 Напишите программу, которая запрашивает с ввода целые числа и выводит их сумму.
  В случае некорректного ввода программа не должна завершаться с ошибкой, а должна продолжать работу,
   удаляя из введённой строки все символы кроме цифр. При отсутствии цифр запрс пользователю повторяется.

Обработчик исключений try-except использовать нельзя.'''
while True:
    numbers= input("Введите  числа")
    Rnumbers =filter(str.isdigit, numbers)
    stsuumm= ''.join(Rnumbers)

    if stsuumm:
        summ= sum(map(int, stsuumm))
        print("Сумма  чисел:",summ)
        break
    else:
        print("не цифры, еще раз")
'''Создайте словарь, где ключами являются числа, а значениями – строки. Примените к нему метод items(), 
полученный объект dict_items передайте в написанную вами функцию, которая создает и возвращает новый словарь, 
"обратный" исходному,
 т. е. ключами являются строки, а значениями – числа.'''
dicti = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'z'}
dict_items=dicti.items()
def udict(dict_items):
    undict = {value: key  for key, value in dict_items}
    return undict

print(udict(dict_items))
'''Опишите структуру данных (базу данных) на основе словаря и интерфейс работы с ней (функцию).

Создайте словарь school, и наполните его данными, которые бы отражали количество учащихся в
 разных классах (1а, 1б, 2б, 6а, 7в и т.п.). И функцию для внесения изменений в словарь в рамках
 следующего функционала:
  а) в одном из классов изменилось количество учащихся;
 б) в школе появился новый класс;
  с) в школе был расформирован (удален) класс, в связи с чем ученики были равномерно распределены по другим;
   d) выгрузка данных: общее количество учащихся в школе, общее колличество классав, распределение учеников по
   классам.

P.S. Дополнительно.

Подумайте как лучше всего хранить такую базу данных в файле. Попробуйте реализовать свою идею.'''
school = {'1а': 34, '3б': 35, '2б': 9, '6а': 28, '7в': 32, '11э': 29, '11б': 65556}


def a(class1, quanity):
    if class1 in school:
        school[class1] == quanity


def b(class1, quanity):
    school[class1] = quanity


def c(class1):
    if class1 in school:
        left = school[class1]
        school.pop(class1)
        respect = left // (len(school))
        for key in school:
            school[key] += respect


def d():
    all = sum(school.values())
    allclasses = len(school)
    distribution = {classn: students for classn, students in school.items()}
    return all, allclasses, distribution
'''Создайте словарь, где ключами являются цифры, а значениями – строки. Передайте словарь в функцию, 
которая создает и возвращает новый словарь, "обратный" исходному, при этом ключами являются буквы составляющие 
строки, а значениями – числа составленные из цифр в порядке соответствующем.'''


def reverse_dict(input_dict):
    result = {}

    for key, value in input_dict.items():

        for i, letter in enumerate(value):
            if letter not in result:
                result[letter] = str(key) + str(i)
            else:
                result[letter] += str(key) + str(i)

    return result


input_dict = {1: 'acc', 2: 'сab', 3: 'ccb'}

output_dict = reverse_dict(input_dict)
print(output_dict)
